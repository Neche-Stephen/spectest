{"/docs/api-references/":{"data":{"":"Comprehensive reference for Spectest APIs including the command line interface and the test suite format.\nUse the links below to explore each area:\nCLI Test Suite Test Case "},"title":"API References"},"/docs/api-references/cli/":{"data":{"":"","#":"The spectest command runs suites and manages the test environment. All options correspond to configuration fields and may be supplied via the config file or the command line.\nnpx spectest [suiteFile] [options] Options Flag Description Default --config=\u003cfile\u003e Load additional configuration from file none --base-url=\u003curl\u003e Base URL for all requests https://localhost:8080 --test-dir=\u003cdir\u003e Directory containing test suites ./test --file-pattern=\u003cregex\u003e Pattern used to locate suite files \\.spectest\\. --start-cmd=\u003ccmd\u003e Command used to start the server npm run start `‚Äìrunning-server=\u003creuse fail kill\u003e` --tags=\u003clist\u003e Comma separated tags for filtering none --rps=\u003cnumber\u003e Requests per second limit Infinity --timeout=\u003cms\u003e Default per‚Äëtest timeout 30000 --snapshot=\u003cfile\u003e Write snapshot JSON to file none --randomize Shuffle execution order false --happy Run only tests expecting a 2xx status false --filter=\u003cpattern\u003e Regex or built‚Äëin filter (happy, failures) none --verbose Print detailed logs false --user-agent=\u003cname\u003e Override the User‚ÄëAgent header chrome_windows --ua=\u003cname\u003e Alias of --user-agent Provide a file path without a flag to run just that suite.\nSee Test Suite and Test Case for details on the file format.\nExamples # Run every suite discovered in testDir npx spectest # Only run a specific file npx spectest auth.spectest.js # Run with mobile user agent and record snapshots npx spectest --user-agent=chrome_android --snapshot=snap.json "},"title":"CLI"},"/docs/api-references/suite/":{"data":{"":"A suite is a file that exports either an array of test cases or an object with a name and tests array. Spectest loads every file under testDir matching filePattern and runs the contained cases.\n// basic array export default [ { name: 'Fetch TODO 1', endpoint: '/todos/1' }, { name: 'Create Post', endpoint: '/posts', request: { method: 'POST' } } ]; // named suite export default { name: 'Comments Tests', tests: [ { name: 'List', endpoint: '/comments/' }, { name: 'Get 1', endpoint: '/comments/1' } ] }; Suites may use CommonJS, ES modules or JSON. Each file becomes its own suite and the file name (without extension) is used when no name is provided.\nRelated: Test Case for the available case options."},"title":"Test Suite"},"/docs/api-references/test-case/":{"data":{"":"","#":"A test case describes a single HTTP operation. Only name and endpoint are required. All other fields are optional and mirror the fetch Request and Response objects.\nProperties Key Description Default name Human readable test name required operationId Unique identifier for the operation name dependsOn Array of operationId strings that must pass first none endpoint Request path relative to the base URL required request.method HTTP method GET request.headers Additional request headers none request.body Request payload none request.* Any other valid fetch Request option none response.status Expected HTTP status 200 response.json Expected partial JSON body none response.schema Zod or JSON schema to validate response none response.headers Expected response headers none response.* Other fetch Response fields none beforeSend(req, state) Function to finalize the request none postTest(res, state, ctx) Function called after the response none tags Tags used with --tags filtering none skip Skip this test false focus Run only focused tests when present false repeat Extra sequential runs of the test 0 bombard Additional simultaneous runs of the test 0 delay Milliseconds to wait before running none timeout Per‚Äëtest timeout override runtime timeout Example { name: 'Create a post', endpoint: '/posts', request: { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: { title: 'foo', body: 'bar', userId: 1 } }, response: { status: 201, json: { id: 101, title: 'foo', body: 'bar', userId: 1 } } } If the server returns 201 with a matching body the case passes. Any mismatched status or body value results in a failure.\nSee Helpers for utilities that modify multiple cases at once."},"title":"Test Case"},"/docs/guides/":{"data":{"":"Practical walk‚Äëthroughs for key Spectest features. These pages dive deeper into filtering large suites, working with snapshots and controlling the environment. Use them alongside the introduction material to build a robust workflow.\nTest Filtering Snapshots Environment Variables Reporting "},"title":"Guides"},"/docs/guides/environment-variables/":{"data":{"":"Because the configuration file is plain JavaScript you can easily incorporate environment variables. This lets you keep secrets and server addresses outside of source control.","cicd-integration#CI/CD Integration":"In a pipeline, export the required environment variables as part of the job configuration. Spectest exits with a non-zero status on failures so it fits naturally into npm test or dedicated testing steps.","passing-secrets#Passing Secrets":"Sensitive values such as authentication tokens can be injected in a beforeSend hook or read from the environment inside your suite.\nexport default [ { name: 'Fetch profile', endpoint: '/profile', beforeSend: req =\u003e { req.headers = { ...req.headers, Authorization: `Bearer ${process.env.API_TOKEN}` }; }, response: { status: 200 } } ]; ","using-env-vars-in-configuration#Using Env Vars in Configuration":" // spectest.config.js export default { baseUrl: process.env.API_BASE_URL, testDir: './test', filePattern: '\\\\.spectest\\\\.', }; Set API_BASE_URL before invoking Spectest and the tests will target that server:\nAPI_BASE_URL=https://staging.example.com npx spectest "},"title":"Environment Variables"},"/docs/guides/reporting/":{"data":{"":"The CLI prints a concise summary after every run. With the --verbose flag you also get server logs grouped under each case.","continuous-integration#Continuous Integration":"Add Spectest to your pipeline by executing the CLI as part of your test job. Example using GitHub Actions:\n- name: Run API tests run: npx spectest --base-url=$URL --snapshot=reports/snapshot.json Upload the snapshot or parse the console output to visualize results over time.","snapshot-reports#Snapshot Reports":"When using --snapshot the report file contains the same pass/fail status and latency numbers. This makes it possible to compare historical runs or feed the data into external dashboards.","standard-output#Standard Output":"Each suite is listed with the individual results:\nüìä Test Summary: [‚úÖ] Login (45ms) [‚ùå] Fetch profile (140ms) Latency statistics and the overall pass count appear at the end. A non‚Äëzero exit code indicates failures which CI systems can detect.","verbose-mode#Verbose Mode":"Enable verbose output when debugging to see request identifiers and server log lines:\nnpx spectest --verbose Any console output from your server is collected and printed beneath the related test when verbose mode is on or when the test fails."},"title":"Reporting"},"/docs/guides/snapshots/":{"data":{"":"Snapshots capture the exact requests and responses from a test run. They are invaluable when reviewing failures or updating expected data.","ci-usage#CI Usage":"Snapshots make it easy to archive historical runs in your CI pipeline. Commit the JSON artifacts or upload them to your results store for later comparison.","creating-a-snapshot#Creating a Snapshot":"Pass the --snapshot flag with a file path. After the run, Spectest writes a JSON report containing each case with its final request, response and overall status.\nnpx spectest --snapshot=.spectest/snap.json The file structure resembles:\n{ \"lastUpdate\": \"2024-05-01 15:04 PDT\", \"cases\": [ { \"name\": \"Create user\", \"operationId\": \"Create user\", \"suite\": \"auth\", \"request\": { \"method\": \"POST\", \"url\": \"/users\" }, \"response\": { \"status\": 201, \"data\": { \"id\": 5 } }, \"status\": \"pass\", \"latency\": 120 } ] } ","updating-tests#Updating Tests":"Copy the captured response bodies back into your suite to keep expectations in sync. You can also rerun only failing cases with --filter=failures which consults the snapshot file."},"title":"Snapshots"},"/docs/guides/test-filtering/":{"data":{"":"Large projects quickly accumulate dozens of suites. Spectest provides several mechanisms to target a subset of tests when you only need to run a portion of them.","by-file#By File":"Use --suite-file to run a single suite or --file-pattern to limit the discovery step.\nnpx spectest auth.spectest.js npx spectest --file-pattern=\"auth*\" ","focus-and-skip#Focus and Skip":"When investigating a failing case you can mark it with focus: true to ignore the rest. Similarly skip: true temporarily disables a case. The focus() and skip() helpers apply these flags to entire suites.","name-patterns-and-smart-filters#Name Patterns and Smart Filters":"--filter accepts a regular expression or one of the built in aliases:\nhappy ‚Äì only cases expecting a 2xx status failures ‚Äì rerun tests that failed in the last snapshot npx spectest --filter=\"Login\" ","randomization-and-dependencies#Randomization and Dependencies":"--randomize shuffles the remaining tests after filtering. Use dependsOn inside a case to declare prerequisites so dependent operations run after their parents succeed.","tags#Tags":"Tag your cases then pass a comma separated list via --tags.\nexport default [ { name: 'Create user', endpoint: '/users', tags: ['users','create'] }, { name: 'List users', endpoint: '/users', tags: ['users','list'] }, ]; npx spectest --tags=users npx spectest --tags=users,list "},"title":"Test Filtering"},"/docs/integrations/":{"data":{"":"Spectest focuses on HTTP verification but it often lives beside other tools in a codebase. These guides show how to combine Spectest with popular JavaScript test frameworks so you can keep your existing unit tests and add fast API checks."},"title":"Integrations"},"/docs/integrations/jest/":{"data":{"":"Jest is the de‚Äëfacto standard for unit testing JavaScript applications. Spectest complements Jest by exercising your running API just like a browser would. Keep your Jest suites for isolated logic and add Spectest for end‚Äëto‚Äëend HTTP verification.","cicd-example#CI/CD example":"A GitHub Actions job might look like:\n- uses: actions/checkout@v3 - run: npm ci - run: npm test Spectest exits with a non‚Äëzero status on failures so the workflow fails when either Jest or Spectest tests fail.","migration-tips#Migration tips":"To migrate existing API tests written in Jest, move the HTTP calls into .spectest.js suites. Spectest‚Äôs declarative format reduces boilerplate and runs faster. Keep pure logic tests in Jest.","running-both-toolchains#Running both toolchains":"Add npm scripts to run them separately or together:\n{ \"scripts\": { \"test:unit\": \"jest\", \"test:api\": \"spectest\", \"test\": \"npm run test:unit \u0026\u0026 npm run test:api\" } } This keeps output from each tool distinct while letting CI execute a single npm test command.\nInvoking Spectest from Jest If you prefer to launch Spectest inside a Jest test you can spawn the CLI and assert on the exit code:\n// api.test.js import { spawnSync } from 'child_process'; test('API contract', () =\u003e { const result = spawnSync('npx', ['spectest'], { stdio: 'inherit' }); expect(result.status).toBe(0); }); Sharing utilities Utility functions and fixtures can be imported by both Jest and Spectest suites. Keep them in a common folder and reference them from your .spectest.js and .test.js files.","sample-project-structure#Sample project structure":" my-project/ ‚îú‚îÄ src/ ‚îú‚îÄ test/ ‚îÇ ‚îú‚îÄ api/ # Spectest suites ‚îÇ ‚îÇ ‚îî‚îÄ users.spectest.js ‚îÇ ‚îî‚îÄ unit/ # Jest tests ‚îÇ ‚îî‚îÄ users.test.js ‚îú‚îÄ jest.config.js ‚îî‚îÄ spectest.config.js ","setup#Setup":"Install both packages in your project:\nnpm install --save-dev jest spectest Create a spectest.config.js at the project root:\n// spectest.config.js export default { baseUrl: 'http://localhost:3000', testDir: './test/api', filePattern: '\\\\.spectest\\\\.', }; Jest‚Äôs own configuration lives in jest.config.js as usual.","troubleshooting#Troubleshooting":" TypeScript suites ‚Äì compile .ts files to JavaScript before running Spectest. Watch mode ‚Äì Spectest runs to completion each time; use a separate terminal if you rely on jest --watch. Exit codes ‚Äì ensure your scripts pass through Spectest‚Äôs exit code so CI can detect failures. "},"title":"Jest"},"/docs/integrations/vitest/":{"data":{"":"Vitest provides a fast, Vite‚Äëpowered alternative to Jest. Spectest can run alongside Vitest to cover your API while Vitest handles component and unit tests.","cicd-example#CI/CD example":" - uses: actions/checkout@v3 - run: npm ci - run: npm test ","example-project-layout#Example project layout":" my-project/ ‚îú‚îÄ src/ ‚îú‚îÄ test/ ‚îÇ ‚îú‚îÄ api/ # Spectest suites ‚îÇ ‚îÇ ‚îî‚îÄ users.spectest.js ‚îÇ ‚îî‚îÄ unit/ # Vitest tests ‚îÇ ‚îî‚îÄ users.test.ts ‚îú‚îÄ vitest.config.ts ‚îî‚îÄ spectest.config.js ","migration-tips#Migration tips":"Move any HTTP‚Äëlevel tests from Vitest into .spectest.js suites. Vitest remains ideal for unit tests and component behavior while Spectest focuses on API contracts.","running-both#Running both":"Define npm scripts similar to:\n{ \"scripts\": { \"test:unit\": \"vitest run\", \"test:api\": \"spectest\", \"test\": \"npm run test:unit \u0026\u0026 npm run test:api\" } } Run npm test locally or in CI to execute everything in sequence.\nCalling Spectest from Vitest You can also start Spectest inside a Vitest test using execa or child_process:\n// api.test.ts import { execaSync } from 'execa'; import { expect, test } from 'vitest'; test('API contract', () =\u003e { const { exitCode } = execaSync('npx', ['spectest'], { stdio: 'inherit' }); expect(exitCode).toBe(0); }); Sharing utilities Place common helpers in a shared folder and import them from both Spectest and Vitest files. This avoids duplication of payload builders or authentication helpers.","setup#Setup":"Install the packages:\nnpm install --save-dev vitest spectest Create spectest.config.js:\n// spectest.config.js export default { baseUrl: 'http://localhost:3000', testDir: './test/api', filePattern: '\\\\.spectest\\\\.', }; Vitest‚Äôs configuration goes in vitest.config.js or inside vite.config.js depending on your project.","troubleshooting#Troubleshooting":" Process exits ‚Äì Vitest stops on the first failing test, whereas Spectest runs all cases. When combining them ensure both exit codes propagate. Watch mode ‚Äì Run Spectest in a separate terminal when using vitest --watch. "},"title":"Vitest"},"/docs/introduction/":{"data":{"":"Spectest makes HTTP API testing fast and declarative. The pages below walk you through installation, key concepts and practical tips:\nGetting Started Core Concepts Testing HTTP APIs Organizing Test Suites Helpers Use these guides sequentially to run your first suite and gradually adopt advanced features."},"title":"Introduction"},"/docs/introduction/concepts/":{"data":{"":"Spectest revolves around a few simple ideas:","configuration#Configuration":"Settings can come from spectest.config.js, a custom config file or CLI flags. The defaults are:\nexport default { startCmd: 'npm run start', baseUrl: 'https://localhost:8080', testDir: './test', filePattern: '\\\\.spectest\\\\.', rps: Infinity, timeout: 30000, randomize: false, happy: false, filter: '', runningServer: 'reuse', userAgent: 'chrome_windows', }; If multiple suites define the same operationId, Spectest will exit with an error. ","running-tests#Running Tests":"The CLI takes care of starting your server (via startCmd), limiting the request rate and printing detailed results.","test-case#Test Case":"A test case describes a single HTTP operation. At minimum it needs a name and an endpoint. Options such as request and response mirror the browser [Request] and [Response] objects.\nKey Purpose name Human readable name endpoint Path relative to baseUrl operationId Unique identifier; defaults to the name dependsOn List of operationIds that must pass first Other fields like beforeSend, postTest, tags, delay and timeout allow advanced control.","test-suite#Test Suite":"Suites are files exporting an array of test cases or an object { name, tests }. The CLI loads every file matching filePattern inside testDir and runs the cases concurrently."},"title":"Core Concepts"},"/docs/introduction/getting-started/":{"data":{"":"Spectest ships as an npm package and can be executed with npx. The quick steps below mirror the sample in the repository README.","configure-the-test-environment#Configure the test environment":"Create a spectest.config.js file at the root of your project:\n// spectest.config.js export default { baseUrl: 'https://jsonplaceholder.typicode.com', testDir: './test', filePattern: '\\\\.spectest\\\\.', }; For real projects baseUrl should point at your API server, for example http://localhost:3000.","installation#Installation":" npm install --save-dev spectest You can also run it directly with npx when you only need the CLI.","write-your-first-tests#Write your first tests":"Create test/jsonpayload.spectest.js:\nconst tests = [ { name: 'Fetch TODO 1', endpoint: '/todos/1' }, { name: 'Create a post', endpoint: '/posts', request: { method: 'POST', headers: { 'Content-Type': 'application/json; charset=UTF-8' }, body: { title: 'foo', body: 'bar', userId: 1 }, }, response: { status: 201, json: { id: 101, title: 'foo', body: 'bar', userId: 1 }, }, }, ]; export default tests; Run the tests:\nnpx spectest The CLI prints a summary similar to:\nüìä Test Summary: [‚úÖ] Fetch TODO 1 (53ms) [‚úÖ] Create a post (108ms) ‚úÖ 2/2 tests passed! üìã Server logs captured: 0 ‚è±Ô∏è Latency: min 53ms; avg 80ms; max 108ms You can run a single suite with npx spectest jsonpayload.spectest.js or override baseUrl on the command line. "},"title":"Getting Started"},"/docs/introduction/helpers/":{"data":{"":"","#":"The spectest/helpers module contains utilities for modifying entire test suites. These functions mutate the cases you pass in and return the updated array.\nimport { focus, delay } from 'spectest/helpers'; const suite = [ { name: 'Get todo list', endpoint: '/todos' }, { name: 'Fetch TODO 1', endpoint: '/todos/1' }, ]; export default focus(delay(suite, 500)); Available helpers composeBeforeSend(...fns) ‚Äì combine multiple beforeSend functions composePostTest(...fns) ‚Äì combine multiple postTest functions delay(tests, ms) ‚Äì add a delay before each case runs focus(tests) ‚Äì mark tests as focused repeat(tests, count) ‚Äì run tests sequentially multiple times bombard(tests, count) ‚Äì launch multiple concurrent runs skip(tests) ‚Äì skip the provided cases Helpers are optional but help reduce repetition in large suites. "},"title":"Helpers"},"/docs/introduction/organizing-test-suites/":{"data":{"":"As your project grows you‚Äôll accumulate many test files. Spectest offers several tools to keep them maintainable.","dependencies#Dependencies":"dependsOn allows explicit sequencing between operations. Tests with unmet dependencies are skipped until prerequisites pass.","file-layout#File layout":"Suites live in the directory specified by testDir and must match filePattern. You can mix JavaScript, ESM, CommonJS and plain JSON files. Typescript should be transpiled ahead of time.","rate-limiting#Rate limiting":"Large suites may hit third‚Äëparty services hard. Set rps in your config or via --rps to cap requests per second.","tags-and-filters#Tags and filters":"Assign tags to cases and run subsets of your suite:\n{ name: 'Fetch TODOs', endpoint: '/todos/', tags: ['todo', 'collection'] } Run with:\nnpx spectest --tags=todo Use --filter to match by name or the built-in happy and failures filters."},"title":"Organizing Test Suites"},"/docs/introduction/testing-http-apis/":{"data":{"":"This guide explains how Spectest interacts with your API and how responses are asserted.","requests#Requests":"Every test sends an HTTP request using Axios under the hood. The request property mirrors the fetch Request options. Common fields include method, headers and body.\n{ endpoint: '/login', request: { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: { username: 'admin', password: 'secret' }, } } ","responses#Responses":"By default Spectest expects a 200 status code. You can assert specific values or validate against a Zod schema.\nimport { z } from 'zod'; { name: 'Create a post', endpoint: '/posts', request: { method: 'POST', body: { title: 'foo', body: 'bar', userId: 1 } }, response: { status: 201, schema: z.object({ id: z.number(), title: z.string(), body: z.literal('foo'), userId: z.number().min(1) }) } } Combine json and schema assertions to verify both shape and exact values. ","timeouts-and-retries#Timeouts and retries":"Use the timeout property to limit how long a request may run. Tests exceeding the limit fail with a ‚è∞ indicator."},"title":"Testing HTTP APIs"}}