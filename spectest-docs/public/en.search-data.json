{"/docs/introduction/":{"data":{"":"Spectest makes HTTP API testing fast and declarative. The pages below walk you through installation, key concepts and practical tips:\nGetting Started Core Concepts Testing HTTP APIs Organizing Test Suites Helpers Use these guides sequentially to run your first suite and gradually adopt advanced features."},"title":"Introduction"},"/docs/introduction/concepts/":{"data":{"":"Spectest revolves around a few simple ideas:","configuration#Configuration":"Settings can come from spectest.config.js, a custom config file or CLI flags. The defaults are:\nexport default { startCmd: 'npm run start', baseUrl: 'https://localhost:8080', testDir: './test', filePattern: '\\\\.spectest\\\\.', rps: Infinity, timeout: 30000, randomize: false, happy: false, filter: '', runningServer: 'reuse', userAgent: 'chrome_windows', }; If multiple suites define the same operationId, Spectest will exit with an error. ","running-tests#Running Tests":"The CLI takes care of starting your server (via startCmd), limiting the request rate and printing detailed results.","test-case#Test Case":"A test case describes a single HTTP operation. At minimum it needs a name and an endpoint. Options such as request and response mirror the browser [Request] and [Response] objects.\nKey Purpose name Human readable name endpoint Path relative to baseUrl operationId Unique identifier; defaults to the name dependsOn List of operationIds that must pass first Other fields like beforeSend, postTest, tags, delay and timeout allow advanced control.","test-suite#Test Suite":"Suites are files exporting an array of test cases or an object { name, tests }. The CLI loads every file matching filePattern inside testDir and runs the cases concurrently."},"title":"Core Concepts"},"/docs/introduction/getting-started/":{"data":{"":"Spectest ships as an npm package and can be executed with npx. The quick steps below mirror the sample in the repository README.","configure-the-test-environment#Configure the test environment":"Create a spectest.config.js file at the root of your project:\n// spectest.config.js export default { baseUrl: 'https://jsonplaceholder.typicode.com', testDir: './test', filePattern: '\\\\.spectest\\\\.', }; For real projects baseUrl should point at your API server, for example http://localhost:3000.","installation#Installation":" npm install --save-dev spectest You can also run it directly with npx when you only need the CLI.","write-your-first-tests#Write your first tests":"Create test/jsonpayload.spectest.js:\nconst tests = [ { name: 'Fetch TODO 1', endpoint: '/todos/1' }, { name: 'Create a post', endpoint: '/posts', request: { method: 'POST', headers: { 'Content-Type': 'application/json; charset=UTF-8' }, body: { title: 'foo', body: 'bar', userId: 1 }, }, response: { status: 201, json: { id: 101, title: 'foo', body: 'bar', userId: 1 }, }, }, ]; export default tests; Run the tests:\nnpx spectest The CLI prints a summary similar to:\nüìä Test Summary: [‚úÖ] Fetch TODO 1 (53ms) [‚úÖ] Create a post (108ms) ‚úÖ 2/2 tests passed! üìã Server logs captured: 0 ‚è±Ô∏è Latency: min 53ms; avg 80ms; max 108ms You can run a single suite with npx spectest jsonpayload.spectest.js or override baseUrl on the command line. "},"title":"Getting Started"},"/docs/introduction/helpers/":{"data":{"":"","#":"The spectest/helpers module contains utilities for modifying entire test suites. These functions mutate the cases you pass in and return the updated array.\nimport { focus, delay } from 'spectest/helpers'; const suite = [ { name: 'Get todo list', endpoint: '/todos' }, { name: 'Fetch TODO 1', endpoint: '/todos/1' }, ]; export default focus(delay(suite, 500)); Available helpers composeBeforeSend(...fns) ‚Äì combine multiple beforeSend functions composePostTest(...fns) ‚Äì combine multiple postTest functions delay(tests, ms) ‚Äì add a delay before each case runs focus(tests) ‚Äì mark tests as focused repeat(tests, count) ‚Äì run tests sequentially multiple times bombard(tests, count) ‚Äì launch multiple concurrent runs skip(tests) ‚Äì skip the provided cases Helpers are optional but help reduce repetition in large suites. "},"title":"Helpers"},"/docs/introduction/organizing-test-suites/":{"data":{"":"As your project grows you‚Äôll accumulate many test files. Spectest offers several tools to keep them maintainable.","dependencies#Dependencies":"dependsOn allows explicit sequencing between operations. Tests with unmet dependencies are skipped until prerequisites pass.","file-layout#File layout":"Suites live in the directory specified by testDir and must match filePattern. You can mix JavaScript, ESM, CommonJS and plain JSON files. Typescript should be transpiled ahead of time.","rate-limiting#Rate limiting":"Large suites may hit third‚Äëparty services hard. Set rps in your config or via --rps to cap requests per second.","tags-and-filters#Tags and filters":"Assign tags to cases and run subsets of your suite:\n{ name: 'Fetch TODOs', endpoint: '/todos/', tags: ['todo', 'collection'] } Run with:\nnpx spectest --tags=todo Use --filter to match by name or the built-in happy and failures filters."},"title":"Organizing Test Suites"},"/docs/introduction/testing-http-apis/":{"data":{"":"This guide explains how Spectest interacts with your API and how responses are asserted.","requests#Requests":"Every test sends an HTTP request using Axios under the hood. The request property mirrors the fetch Request options. Common fields include method, headers and body.\n{ endpoint: '/login', request: { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: { username: 'admin', password: 'secret' }, } } ","responses#Responses":"By default Spectest expects a 200 status code. You can assert specific values or validate against a Zod schema.\nimport { z } from 'zod'; { name: 'Create a post', endpoint: '/posts', request: { method: 'POST', body: { title: 'foo', body: 'bar', userId: 1 } }, response: { status: 201, schema: z.object({ id: z.number(), title: z.string(), body: z.literal('foo'), userId: z.number().min(1) }) } } Combine json and schema assertions to verify both shape and exact values. ","timeouts-and-retries#Timeouts and retries":"Use the timeout property to limit how long a request may run. Tests exceeding the limit fail with a ‚è∞ indicator."},"title":"Testing HTTP APIs"}}